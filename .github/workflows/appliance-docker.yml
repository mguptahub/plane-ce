name: Appliance Build Docker

on:
  workflow_dispatch:
    inputs:
      build_aws_appliance_ee:
        description: 'Build Plane-EE AWS Appliance'
        required: true
        type: boolean
        default: false
      aws_manifest_bucket:
        description: 'AWS Manifest Bucket'
        required: true
        default: 'plane-terraform-state-dev'
      aws_vpc_cidr:
        description: 'AWS VPC CIDR'
        required: true
        default: '10.22.0.0/16'
      aws_subnet_cidr:
        description: 'AWS Subnet CIDR'
        required: true
        default: '10.22.1.0/24'
      aws_vpc_region:
        description: 'AWS VPC Region'
        required: true
        default: 'us-east-1'
      ami_prefix:
        description: 'AMI Prefix'
        required: true
        default: 'plane-commercial'
      prime_host:
        description: 'Prime Host'
        required: true
        default: 'https://prime.plane.so'
      ami_publish_region:
        description: 'AMI Publish Region'
        type: choice
        required: true
        options:
          - VPC
          - Global
        default: 'VPC'

env:
  AWS_ACCESS_KEY: ${{ secrets.PLANE_DEV_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_KEY: ${{ secrets.PLANE_DEV_AWS_SECRET_ACCESS_KEY }}
  AWS_MANIFEST_BUCKET: ${{ inputs.aws_manifest_bucket || 'plane-terraform-state-dev' }}

  AWS_VPC_CIDR: ${{ inputs.aws_vpc_cidr || '10.22.0.0/16' }}
  AWS_SUBNET_CIDR: ${{ inputs.aws_subnet_cidr || '10.22.1.0/24' }}
  AWS_VPC_REGION: ${{ inputs.aws_vpc_region || 'us-east-1' }}
  AWS_BASE_IMAGE_OWNER: '099720109477'
  PRIME_HOST: ${{ inputs.prime_host || 'https://prime.plane.so' }}
  AMI_PREFIX: ${{ inputs.ami_prefix || 'plane-commercial' }}
  AMI_PUBLISH_REGION: ${{ inputs.ami_publish_region || 'VPC' }}
jobs:

  build_aws_appliance_ee:
    if: inputs.build_aws_appliance_ee == true
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_VPC_REGION }}

      - name: Download Previous Manifest
        run: |
          # Download the previous manifest from S3 if it exists
          aws s3 cp s3://${{ env.AWS_MANIFEST_BUCKET }}/plane-commercial/ami/manifests/ee-docker-aws-ami-latest-manifest.json ./ee-docker-aws-ami-previous-manifest.json || true

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: latest
      - name: Copy Upload Assets
        run: |
          mkdir -p plane-dist
          cp deploy/packer/cloudinit-ee/* plane-dist/

      - name: Run `packer init`
        id: init
        run: "packer init ./deploy/packer/ee-docker-aws-ami.pkr.hcl"

      - name: Run `packer validate`
        id: validate
        run: "packer validate ./deploy/packer/ee-docker-aws-ami.pkr.hcl"

      - name: Run `packer build`
        id: build
        run: |
          touch variables.pkrvars.hcl
          echo "vpc_cidr = ${AWS_VPC_CIDR}" >> variables.pkrvars.hcl
          echo "subnet_cidr = ${AWS_SUBNET_CIDR}" >> variables.pkrvars.hcl
          echo "base_image_owner = ${AWS_BASE_IMAGE_OWNER}" >> variables.pkrvars.hcl
          echo "prime_host = ${PRIME_HOST}" >> variables.pkrvars.hcl

          if [ "${{ env.AMI_PUBLISH_REGION }}" == "VPC" ]; then
            echo 'ami_regions = ["${AWS_VPC_REGION}"]' >> variables.pkrvars.hcl
          else
            echo 'ami_regions = ["us-east-1","us-east-2"]' >> variables.pkrvars.hcl
          fi

          packer build \
            -var "aws_access_key=${{ env.AWS_ACCESS_KEY }}" \
            -var "aws_secret_key=${{ env.AWS_SECRET_KEY }}" \
            -var "ami_name_prefix=${{ env.AMI_PREFIX }}" \
            -var-file=variables.pkrvars.hcl \
            ./deploy/packer/ee-docker-aws-ami.pkr.hcl

      - name: Cleanup Old AMIs
        if: hashFiles('ee-docker-aws-ami-previous-manifest.json') != ''
        run: |
          OLD_AMI_ID=$(jq -r '.builds[-1].artifact_id' ee-docker-aws-ami-previous-manifest.json | cut -d ":" -f2)
          if [ ! -z "$OLD_AMI_ID" ]; then
            echo "Found previous AMI: $OLD_AMI_ID"
            # Deregister the old AMI
            aws ec2 deregister-image --image-id "$OLD_AMI_ID" || true
            echo "Deregistered previous AMI: $OLD_AMI_ID"
          fi

      - name: Extract AMI Information
        id: ami_info
        run: |
          # Extract AMI ID and other details from manifest
          AMI_ID=$(jq -r '.builds[-1].artifact_id' ee-docker-aws-ami-manifest.json | cut -d ":" -f2)
          AMI_NAME=$(jq -r '.builds[-1].custom_data.ami_name' ee-docker-aws-ami-manifest.json)
          REGION=$(jq -r '.builds[-1].custom_data.region' ee-docker-aws-ami-manifest.json)
          BUILD_TIME=$(jq -r '.builds[-1].custom_data.build_time' ee-docker-aws-ami-manifest.json)
          
          # Add git information to manifest
          jq --arg branch "${{ github.ref_name }}" \
             --arg commit "${{ github.sha }}" \
             --arg build_time "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
             '.builds[-1].custom_data += {git_branch: $branch, git_commit: $commit, build_timestamp: $build_time}' \
             ee-docker-aws-ami-manifest.json > enhanced-ee-docker-aws-ami-manifest.json
          mv enhanced-ee-docker-aws-ami-manifest.json ee-docker-aws-ami-manifest.json
          
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_OUTPUT
          echo "AMI_NAME=${AMI_NAME}" >> $GITHUB_OUTPUT
          echo "REGION=${REGION}" >> $GITHUB_OUTPUT
          
          echo "âœ… AMI built successfully!"
          echo "ðŸ”¹ AMI ID: ${AMI_ID}"
          echo "ðŸ”¹ AMI Name: ${AMI_NAME}"
          echo "ðŸ”¹ Region: ${REGION}"
          echo "ðŸ”¹ Build Time: ${BUILD_TIME}"

      - name: Store Manifest in S3
        run: |
          # Store the current manifest as latest
          aws s3 cp ee-docker-aws-ami-manifest.json s3://${{ env.AWS_MANIFEST_BUCKET }}/plane-commercial/ami/manifests/ee-docker-aws-ami-latest-manifest.json
          
          # Also store a versioned copy
          aws s3 cp ee-docker-aws-ami-manifest.json "s3://${{ env.AWS_MANIFEST_BUCKET }}/plane-commercial/ami/manifests/ee-docker-aws-ami-manifest-${{ github.sha }}.json"

      - name: Upload Build Manifest as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ee-docker-aws-ami-manifest
          path: ce-aws-ami-manifest.json
          retention-days: 30

      - name: Create Build Summary
        run: |
          echo "### ðŸš€ Plane EE Docker AWS Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Detail | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| AMI ID | \`${{ steps.ami_info.outputs.AMI_ID }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| AMI Name | \`${{ steps.ami_info.outputs.AMI_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Region | \`${{ steps.ami_info.outputs.REGION }}\` |" >> $GITHUB_STEP_SUMMARY

      - name: Tag AMI
        run: |
          aws ec2 create-tags \
            --resources ${{ steps.ami_info.outputs.AMI_ID }} \
            --tags \
              Key=GitBranch,Value=${{ github.ref_name }} \
              Key=GitCommit,Value=${{ github.sha }} \
              Key=BuildTime,Value=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
